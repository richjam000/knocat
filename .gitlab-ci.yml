# build: Create a unique "review" docker image							# eg: review-knocat:branch600-ca3ec109
# deploy-review: Create a "review environment" container using the new image			# eg: review-knocat-branch600-ca3ec109
# deploy-prod:	 Manual initiation only.
#		 Adds a production tag to the "review" image					# eg: knocat:ca3ec109
#                Stops and removes the running production image
# 		 Starts a new production container using the new image				# eg: knocat
# stop-review:   Manual initiation only ( from gitlab "Operations" GIU)
#		 Remove the "review environment" container
#                AND.. remove the review image
#		 YES - this does mean that pipeline flow must be....
#		 IF review fails -  "stop-review" ... no merge request - no "deploy-prod"
#                IF review passes - Do not run "stop-review" intil AFER "deploy-prod"

variables:
  REVIEW_IMAGE_NAME: review-${CI_PROJECT_NAME}							# eg: review-knocat
  REVIEW_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}				# eg: branch600-ca3ec109
  REVIEW_CONTAINER_NAME: review-${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}	# eg: review-knocat-branch600-ca3ec109

stages:
  - build
  - deploy-review
  - deploy-prod

build_image:
   stage: build
   tags:
    - dind
   script:
     - echo "Build the review image $REVIEW_IMAGE_NAME:$REVIEW_IMAGE_TAG"
     - docker build -t $REVIEW_IMAGE_NAME:$REVIEW_IMAGE_TAG -f docker/Dockerfile .
   except:
     - master
     
deploy_review:
   stage: deploy-review
   variables:
    GIT_STRATEGY: none
   environment:
    name: review/review-${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    url: http://www.review-${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}.knocat.com/
    on_stop: stop_review
   tags:
    - dind
   script:
     - echo "Start the review container $REVIEW_CONTAINER_NAME"
     - echo docker run -d --name=$REVIEW_CONTAINER_NAME --network=jamnet $REVIEW_IMAGE_NAME:$REVIEW_IMAGE_TAG
     - docker run -d --name=$REVIEW_CONTAINER_NAME --network=jamnet $REVIEW_IMAGE_NAME:$REVIEW_IMAGE_TAG
   except:
     - master

stop_review:
  tags:
    - dind
  stage: deploy-review
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Stop and remove review container $REVIEW_CONTAINER_NAME"
    - docker container stop $REVIEW_CONTAINER_NAME
    - docker container rm $REVIEW_CONTAINER_NAME
    - echo "Remove the review image  $REVIEW_IMAGE_NAME:$REVIEW_IMAGE_TAG"
    - docker rmi $REVIEW_IMAGE_NAME:$REVIEW_IMAGE_TAG
  when: manual
  environment:
    name: review/review-${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    url: http://www.review-${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}.knocat.com/
    action: stop
  except:
     - master
     - merge_requests

deploy_prod:
  stage: deploy-prod
  variables:
    GIT_STRATEGY: none
    PRODUCTION_IMAGE_NAME: ${CI_PROJECT_NAME} 		# production-knocat
    PRODUCTION_IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}	# ca3ec109
    PRODUCTION_CONTAINER_NAME: ${CI_PROJECT_NAME}	# knocat
  tags:
    - dind
  script:
    - echo "docker tag $REVIEW_IMAGE_NAME:$REVIEW_IMAGE_TAG $PRODUCTION_IMAGE_NAME:$PRODUCTION_IMAGE_TAG"
    - docker tag $REVIEW_IMAGE_NAME:$REVIEW_IMAGE_TAG $PRODUCTION_IMAGE_NAME:$PRODUCTION_IMAGE_TAG
    - echo "Stop and remove the current production container $PRODUCTION_CONTAINER_NAME"
    - docker stop $PRODUCTION_CONTAINER_NAME || echo "Continue"
    - docker rm $PRODUCTION_CONTAINER_NAME || echo "Continue"
    - echo "Create a new production container ($PRODUCTION_CONTAINER_NAME) based on the new image ($PRODUCTION_IMAGE_NAME:$PRODUCTION_IMAGE_TAG)"
    - >
       docker run -d --name=$PRODUCTION_CONTAINER_NAME --network=jamnet --hostname=$PRODUCTION_CONTAINER_NAME --restart=always 
       --volume ${PRODUCTION_CONTAINER_NAME}-logs:/var/log/httpd 
       $PRODUCTION_IMAGE_NAME:$PRODUCTION_IMAGE_TAG
  environment:
    name: production
    url: http://www.knocat.com
  when: manual
  only:
  - merge_requests
